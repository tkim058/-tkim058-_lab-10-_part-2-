
[tkim058]_lab[10]_part[2].elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000048  00800100  0000032a  000003be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000032a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800148  00800148  00000406  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000406  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000438  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000478  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e11  00000000  00000000  00000518  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000981  00000000  00000000  00001329  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000591  00000000  00000000  00001caa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000188  00000000  00000000  0000223c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005a5  00000000  00000000  000023c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000533  00000000  00000000  00002969  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00002e9c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	de c0       	rjmp	.+444    	; 0x1f2 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e2       	ldi	r30, 0x2A	; 42
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 34       	cpi	r26, 0x48	; 72
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a8 e4       	ldi	r26, 0x48	; 72
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a8 35       	cpi	r26, 0x58	; 88
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	e4 d0       	rcall	.+456    	; 0x28c <main>
  c4:	30 c1       	rjmp	.+608    	; 0x326 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <delay_ms>:
	TCCR1B = 0x00;	// bit3bit1bit0 = 000: timer off
}

void TimerISR()
{
	TimerFlag = 1;
  c8:	18 16       	cp	r1, r24
  ca:	19 06       	cpc	r1, r25
  cc:	5c f0       	brlt	.+22     	; 0xe4 <delay_ms+0x1c>
  ce:	08 95       	ret
  d0:	00 00       	nop
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	31 09       	sbc	r19, r1
  d6:	e1 f7       	brne	.-8      	; 0xd0 <delay_ms+0x8>
  d8:	4f 5f       	subi	r20, 0xFF	; 255
  da:	5f 4f       	sbci	r21, 0xFF	; 255
  dc:	84 17       	cp	r24, r20
  de:	95 07       	cpc	r25, r21
  e0:	19 f4       	brne	.+6      	; 0xe8 <delay_ms+0x20>
  e2:	08 95       	ret
  e4:	40 e0       	ldi	r20, 0x00	; 0
  e6:	50 e0       	ldi	r21, 0x00	; 0
  e8:	27 e0       	ldi	r18, 0x07	; 7
  ea:	33 e0       	ldi	r19, 0x03	; 3
  ec:	f1 cf       	rjmp	.-30     	; 0xd0 <delay_ms+0x8>

000000ee <LCD_WriteCommand>:
  ee:	5e 98       	cbi	0x0b, 6	; 11
  f0:	88 b9       	out	0x08, r24	; 8
  f2:	5f 9a       	sbi	0x0b, 7	; 11
  f4:	00 00       	nop
  f6:	5f 98       	cbi	0x0b, 7	; 11
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	e5 cf       	rjmp	.-54     	; 0xc8 <delay_ms>
  fe:	08 95       	ret

00000100 <LCD_ClearScreen>:
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	f5 cf       	rjmp	.-22     	; 0xee <LCD_WriteCommand>
 104:	08 95       	ret

00000106 <LCD_Cursor>:
 106:	81 31       	cpi	r24, 0x11	; 17
 108:	18 f4       	brcc	.+6      	; 0x110 <LCD_Cursor+0xa>
 10a:	81 58       	subi	r24, 0x81	; 129
 10c:	f0 cf       	rjmp	.-32     	; 0xee <LCD_WriteCommand>
 10e:	08 95       	ret
 110:	81 55       	subi	r24, 0x51	; 81
 112:	ed cf       	rjmp	.-38     	; 0xee <LCD_WriteCommand>
 114:	08 95       	ret

00000116 <LCD_init>:
 116:	84 e6       	ldi	r24, 0x64	; 100
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	d6 df       	rcall	.-84     	; 0xc8 <delay_ms>
 11c:	88 e3       	ldi	r24, 0x38	; 56
 11e:	e7 df       	rcall	.-50     	; 0xee <LCD_WriteCommand>
 120:	86 e0       	ldi	r24, 0x06	; 6
 122:	e5 df       	rcall	.-54     	; 0xee <LCD_WriteCommand>
 124:	8f e0       	ldi	r24, 0x0F	; 15
 126:	e3 df       	rcall	.-58     	; 0xee <LCD_WriteCommand>
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	e1 df       	rcall	.-62     	; 0xee <LCD_WriteCommand>
 12c:	8a e0       	ldi	r24, 0x0A	; 10
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	cb cf       	rjmp	.-106    	; 0xc8 <delay_ms>
 132:	08 95       	ret

00000134 <LCD_WriteData>:
 134:	5e 9a       	sbi	0x0b, 6	; 11
 136:	88 b9       	out	0x08, r24	; 8
 138:	5f 9a       	sbi	0x0b, 7	; 11
 13a:	00 00       	nop
 13c:	5f 98       	cbi	0x0b, 7	; 11
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	c2 cf       	rjmp	.-124    	; 0xc8 <delay_ms>
 144:	08 95       	ret

00000146 <SMTick1>:
 146:	ff 92       	push	r15
 148:	0f 93       	push	r16
 14a:	1f 93       	push	r17
 14c:	cf 93       	push	r28
 14e:	df 93       	push	r29
 150:	8c 01       	movw	r16, r24
 152:	89 2b       	or	r24, r25
 154:	19 f5       	brne	.+70     	; 0x19c <SMTick1+0x56>
 156:	c1 e0       	ldi	r28, 0x01	; 1
 158:	d0 e0       	ldi	r29, 0x00	; 0
 15a:	ff 24       	eor	r15, r15
 15c:	f3 94       	inc	r15
 15e:	8c 2f       	mov	r24, r28
 160:	d2 df       	rcall	.-92     	; 0x106 <LCD_Cursor>
 162:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 166:	fe 01       	movw	r30, r28
 168:	ef 5f       	subi	r30, 0xFF	; 255
 16a:	fe 4f       	sbci	r31, 0xFE	; 254
 16c:	e8 0f       	add	r30, r24
 16e:	f1 1d       	adc	r31, r1
 170:	32 97       	sbiw	r30, 0x02	; 2
 172:	80 81       	ld	r24, Z
 174:	df df       	rcall	.-66     	; 0x134 <LCD_WriteData>
 176:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 17a:	9e 01       	movw	r18, r28
 17c:	28 0f       	add	r18, r24
 17e:	31 1d       	adc	r19, r1
 180:	24 34       	cpi	r18, 0x44	; 68
 182:	31 05       	cpc	r19, r1
 184:	11 f4       	brne	.+4      	; 0x18a <SMTick1+0x44>
 186:	f0 92 00 01 	sts	0x0100, r15	; 0x800100 <__data_start>
 18a:	21 96       	adiw	r28, 0x01	; 1
 18c:	c1 31       	cpi	r28, 0x11	; 17
 18e:	d1 05       	cpc	r29, r1
 190:	31 f7       	brne	.-52     	; 0x15e <SMTick1+0x18>
 192:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 196:	8f 5f       	subi	r24, 0xFF	; 255
 198:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 19c:	c8 01       	movw	r24, r16
 19e:	df 91       	pop	r29
 1a0:	cf 91       	pop	r28
 1a2:	1f 91       	pop	r17
 1a4:	0f 91       	pop	r16
 1a6:	ff 90       	pop	r15
 1a8:	08 95       	ret

000001aa <TimerOn>:
 1aa:	8b e0       	ldi	r24, 0x0B	; 11
 1ac:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 1b0:	8d e7       	ldi	r24, 0x7D	; 125
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 1b8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 1bc:	82 e0       	ldi	r24, 0x02	; 2
 1be:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 1c2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 1c6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 1ca:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <_avr_timer_M>
 1ce:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <_avr_timer_M+0x1>
 1d2:	a0 91 46 01 	lds	r26, 0x0146	; 0x800146 <_avr_timer_M+0x2>
 1d6:	b0 91 47 01 	lds	r27, 0x0147	; 0x800147 <_avr_timer_M+0x3>
 1da:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <_avr_timer_cntcurr>
 1de:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <_avr_timer_cntcurr+0x1>
 1e2:	a0 93 56 01 	sts	0x0156, r26	; 0x800156 <_avr_timer_cntcurr+0x2>
 1e6:	b0 93 57 01 	sts	0x0157, r27	; 0x800157 <_avr_timer_cntcurr+0x3>
 1ea:	8f b7       	in	r24, 0x3f	; 63
 1ec:	80 68       	ori	r24, 0x80	; 128
 1ee:	8f bf       	out	0x3f, r24	; 63
 1f0:	08 95       	ret

000001f2 <__vector_13>:
}

//In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect)
{
 1f2:	1f 92       	push	r1
 1f4:	0f 92       	push	r0
 1f6:	0f b6       	in	r0, 0x3f	; 63
 1f8:	0f 92       	push	r0
 1fa:	11 24       	eor	r1, r1
 1fc:	8f 93       	push	r24
 1fe:	9f 93       	push	r25
 200:	af 93       	push	r26
 202:	bf 93       	push	r27
	//CPU automatically calls when TCNT1 == OCR1 (every 1ms per TimerOn settings)
	_avr_timer_cntcurr--;	//count down to 0 rather than up to TOP
 204:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <_avr_timer_cntcurr>
 208:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <_avr_timer_cntcurr+0x1>
 20c:	a0 91 56 01 	lds	r26, 0x0156	; 0x800156 <_avr_timer_cntcurr+0x2>
 210:	b0 91 57 01 	lds	r27, 0x0157	; 0x800157 <_avr_timer_cntcurr+0x3>
 214:	01 97       	sbiw	r24, 0x01	; 1
 216:	a1 09       	sbc	r26, r1
 218:	b1 09       	sbc	r27, r1
 21a:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <_avr_timer_cntcurr>
 21e:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <_avr_timer_cntcurr+0x1>
 222:	a0 93 56 01 	sts	0x0156, r26	; 0x800156 <_avr_timer_cntcurr+0x2>
 226:	b0 93 57 01 	sts	0x0157, r27	; 0x800157 <_avr_timer_cntcurr+0x3>
	if(_avr_timer_cntcurr == 0)
 22a:	89 2b       	or	r24, r25
 22c:	8a 2b       	or	r24, r26
 22e:	8b 2b       	or	r24, r27
 230:	99 f4       	brne	.+38     	; 0x258 <__vector_13+0x66>
	TCCR1B = 0x00;	// bit3bit1bit0 = 000: timer off
}

void TimerISR()
{
	TimerFlag = 1;
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <TimerFlag>
	//CPU automatically calls when TCNT1 == OCR1 (every 1ms per TimerOn settings)
	_avr_timer_cntcurr--;	//count down to 0 rather than up to TOP
	if(_avr_timer_cntcurr == 0)
	{
		TimerISR();
		_avr_timer_cntcurr = _avr_timer_M;
 238:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <_avr_timer_M>
 23c:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <_avr_timer_M+0x1>
 240:	a0 91 46 01 	lds	r26, 0x0146	; 0x800146 <_avr_timer_M+0x2>
 244:	b0 91 47 01 	lds	r27, 0x0147	; 0x800147 <_avr_timer_M+0x3>
 248:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <_avr_timer_cntcurr>
 24c:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <_avr_timer_cntcurr+0x1>
 250:	a0 93 56 01 	sts	0x0156, r26	; 0x800156 <_avr_timer_cntcurr+0x2>
 254:	b0 93 57 01 	sts	0x0157, r27	; 0x800157 <_avr_timer_cntcurr+0x3>
	}
}
 258:	bf 91       	pop	r27
 25a:	af 91       	pop	r26
 25c:	9f 91       	pop	r25
 25e:	8f 91       	pop	r24
 260:	0f 90       	pop	r0
 262:	0f be       	out	0x3f, r0	; 63
 264:	0f 90       	pop	r0
 266:	1f 90       	pop	r1
 268:	18 95       	reti

0000026a <TimerSet>:

//Set TimerISR() to tick every M ms
void TimerSet(unsigned long M)
{
	_avr_timer_M = M;
 26a:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <_avr_timer_M>
 26e:	70 93 45 01 	sts	0x0145, r23	; 0x800145 <_avr_timer_M+0x1>
 272:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <_avr_timer_M+0x2>
 276:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <_avr_timer_M+0x3>
	_avr_timer_cntcurr = _avr_timer_M;
 27a:	60 93 54 01 	sts	0x0154, r22	; 0x800154 <_avr_timer_cntcurr>
 27e:	70 93 55 01 	sts	0x0155, r23	; 0x800155 <_avr_timer_cntcurr+0x1>
 282:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <_avr_timer_cntcurr+0x2>
 286:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <_avr_timer_cntcurr+0x3>
 28a:	08 95       	ret

0000028c <main>:
	return state;
}

int main(void)
{
	DDRD = 0xFF; PORTD = 0x00;
 28c:	8f ef       	ldi	r24, 0xFF	; 255
 28e:	8a b9       	out	0x0a, r24	; 10
 290:	1b b8       	out	0x0b, r1	; 11
	DDRA = 0xFF; PORTA = 0x00;
 292:	81 b9       	out	0x01, r24	; 1
 294:	12 b8       	out	0x02, r1	; 2
	
	static task task1;
	task *tasks[] = {&task1};
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);
	
	task1.state = 0;
 296:	e8 e4       	ldi	r30, 0x48	; 72
 298:	f1 e0       	ldi	r31, 0x01	; 1
 29a:	10 82       	st	Z, r1
	task1.period = SMTick1_period;
 29c:	8c e2       	ldi	r24, 0x2C	; 44
 29e:	91 e0       	ldi	r25, 0x01	; 1
 2a0:	a0 e0       	ldi	r26, 0x00	; 0
 2a2:	b0 e0       	ldi	r27, 0x00	; 0
 2a4:	81 83       	std	Z+1, r24	; 0x01
 2a6:	92 83       	std	Z+2, r25	; 0x02
 2a8:	a3 83       	std	Z+3, r26	; 0x03
 2aa:	b4 83       	std	Z+4, r27	; 0x04
	task1.elapsedTime = SMTick1_period;
 2ac:	85 83       	std	Z+5, r24	; 0x05
 2ae:	96 83       	std	Z+6, r25	; 0x06
 2b0:	a7 83       	std	Z+7, r26	; 0x07
 2b2:	b0 87       	std	Z+8, r27	; 0x08
	task1.TickFct = &SMTick1;
 2b4:	83 ea       	ldi	r24, 0xA3	; 163
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	92 87       	std	Z+10, r25	; 0x0a
 2ba:	81 87       	std	Z+9, r24	; 0x09
	
	TimerSet(GCD);
 2bc:	61 e0       	ldi	r22, 0x01	; 1
 2be:	70 e0       	ldi	r23, 0x00	; 0
 2c0:	80 e0       	ldi	r24, 0x00	; 0
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	d2 df       	rcall	.-92     	; 0x26a <TimerSet>
	TimerOn();
 2c6:	71 df       	rcall	.-286    	; 0x1aa <TimerOn>
	LCD_init();
 2c8:	26 df       	rcall	.-436    	; 0x116 <LCD_init>
 2ca:	1a df       	rcall	.-460    	; 0x100 <LCD_ClearScreen>
	LCD_ClearScreen();
 2cc:	c8 e4       	ldi	r28, 0x48	; 72
 2ce:	d1 e0       	ldi	r29, 0x01	; 1
	
	while(1)
	{
		for(i = 0; i < numTasks; i++)
		{
			if(tasks[i] ->elapsedTime >= tasks[i]->period)
 2d0:	4d 81       	ldd	r20, Y+5	; 0x05
 2d2:	5e 81       	ldd	r21, Y+6	; 0x06
 2d4:	6f 81       	ldd	r22, Y+7	; 0x07
 2d6:	78 85       	ldd	r23, Y+8	; 0x08
 2d8:	89 81       	ldd	r24, Y+1	; 0x01
 2da:	9a 81       	ldd	r25, Y+2	; 0x02
 2dc:	ab 81       	ldd	r26, Y+3	; 0x03
 2de:	bc 81       	ldd	r27, Y+4	; 0x04
 2e0:	48 17       	cp	r20, r24
 2e2:	59 07       	cpc	r21, r25
 2e4:	6a 07       	cpc	r22, r26
 2e6:	7b 07       	cpc	r23, r27
 2e8:	60 f0       	brcs	.+24     	; 0x302 <main+0x76>
 2ea:	88 81       	ld	r24, Y
 2ec:	e9 85       	ldd	r30, Y+9	; 0x09
			{
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 2ee:	fa 85       	ldd	r31, Y+10	; 0x0a
 2f0:	08 2e       	mov	r0, r24
 2f2:	00 0c       	add	r0, r0
 2f4:	99 0b       	sbc	r25, r25
 2f6:	09 95       	icall
 2f8:	88 83       	st	Y, r24
 2fa:	1d 82       	std	Y+5, r1	; 0x05
 2fc:	1e 82       	std	Y+6, r1	; 0x06
				tasks[i]->elapsedTime = 0;
 2fe:	1f 82       	std	Y+7, r1	; 0x07
 300:	18 86       	std	Y+8, r1	; 0x08
 302:	8d 81       	ldd	r24, Y+5	; 0x05
 304:	9e 81       	ldd	r25, Y+6	; 0x06
			}
			tasks[i]->elapsedTime += 1;
 306:	af 81       	ldd	r26, Y+7	; 0x07
 308:	b8 85       	ldd	r27, Y+8	; 0x08
 30a:	01 96       	adiw	r24, 0x01	; 1
 30c:	a1 1d       	adc	r26, r1
 30e:	b1 1d       	adc	r27, r1
 310:	8d 83       	std	Y+5, r24	; 0x05
 312:	9e 83       	std	Y+6, r25	; 0x06
 314:	af 83       	std	Y+7, r26	; 0x07
 316:	b8 87       	std	Y+8, r27	; 0x08
 318:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <TimerFlag>
		}
		while(!TimerFlag);
 31c:	88 23       	and	r24, r24
 31e:	e1 f3       	breq	.-8      	; 0x318 <main+0x8c>
 320:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <TimerFlag>
		TimerFlag = 0;
 324:	d5 cf       	rjmp	.-86     	; 0x2d0 <main+0x44>

00000326 <_exit>:
 326:	f8 94       	cli

00000328 <__stop_program>:
	}
 328:	ff cf       	rjmp	.-2      	; 0x328 <__stop_program>
